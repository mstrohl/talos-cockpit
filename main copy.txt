package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/exec"
	"os/signal"
	"path/filepath"
	"strings"
	"syscall"
	"time"

	"github.com/google/go-github/v39/github"
	_ "github.com/mattn/go-sqlite3"
	"golang.org/x/oauth2"
	"gopkg.in/yaml.v2"
)

// Cluster représente les informations de base sur un cluster Kubernetes
type Cluster struct {
	ID       int
	Name     string
	Endpoint string
}

// ClusterMember contient les détails d'un membre du cluster Talos
type ClusterMember struct {
	ID                      int
	ClusterID               int
	Namespace               string
	Status                  string
	MachineID               string
	currentInstalledVersion string
	Hostname                string
	Role                    string
	latestRemoteVersion     string
	IP                      string
	LastUpdated             time.Time
}

// TalosVersionManager gère les opérations sur le cluster Talos
type TalosVersionManager struct {
	githubClient            *github.Client
	webServer               *http.Server
	db                      *sql.DB
	currentInstalledVersion string
	latestRemoteVersion     string
	clientInfo              string
}

// filterIPv4Addresses filtre et ne conserve que les adresses IPv4 valides
func filterIPv4Addresses(addresses []string) []string {
	var ipv4Addresses []string
	for _, addr := range addresses {
		ip := net.ParseIP(addr)
		if ip != nil && ip.To4() != nil {
			ipv4Addresses = append(ipv4Addresses, addr)
		}
	}
	return ipv4Addresses
}

// runCommand exécute une commande système et retourne sa sortie
func (m *TalosVersionManager) runCommand(command string, args ...string) (string, error) {
	cmd := exec.Command(command, args...)
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("%s: %w", string(output), err)
	}
	return string(output), nil
}

// getClusterID récupère dynamiquement l'identifiant du cluster Talos
func (m *TalosVersionManager) getClusterID() (string, error) {
	// Exécution de la commande talosctl pour obtenir les informations du cluster
	output, err := m.runCommand("talosctl", "get", "info", "-o", "yaml")
	if err != nil {
		return "", err
	}

	// Structure pour parser les informations du cluster
	type ClusterInfoData struct {
		Spec struct {
			ClusterID string `yaml:"clusterId"`
		} `yaml:"spec"`
	}

	var clusterInfo ClusterInfoData
	err = yaml.Unmarshal([]byte(output), &clusterInfo)
	if err != nil {
		return "", fmt.Errorf("erreur de parsing YAML : %v", err)
	}

	return clusterInfo.Spec.ClusterID, nil
}

// initDatabase initialise la base de données SQLite pour stocker les informations du cluster
func (m *TalosVersionManager) initDatabase() error {
	// Créer le répertoire pour la base de données
	dbDir := filepath.Join(os.Getenv("HOME"), ".talos-manager")
	if err := os.MkdirAll(dbDir, 0755); err != nil {
		return err
	}

	// Ouvrir ou créer la base de données
	dbPath := filepath.Join(dbDir, "talos_clusters.db")
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		return err
	}

	// Créer les tables nécessaires
	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS clusters (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			name TEXT UNIQUE,
			endpoint TEXT
		);

		CREATE TABLE IF NOT EXISTS cluster_members (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			cluster_id INTEGER,
			namespace TEXT,
			type TEXT,
			member_id TEXT UNIQUE,
			hostname TEXT,
			machine_type TEXT,
			config_version TEXT,
			os_version TEXT,
			addresses TEXT,
			last_updated DATETIME,
			FOREIGN KEY(cluster_id) REFERENCES clusters(id)
		);

		CREATE UNIQUE INDEX IF NOT EXISTS idx_member_id ON cluster_members(member_id);
	`)
	if err != nil {
		return err
	}

	m.db = db
	return nil
}

// upsertCluster insère ou met à jour les informations d'un cluster
func (m *TalosVersionManager) upsertCluster(clusterID, endpoint string) (int, error) {
	result, err := m.db.Exec(`
		INSERT OR REPLACE INTO clusters (name, endpoint) 
		VALUES (?, ?)
	`, clusterID, endpoint)
	if err != nil {
		return 0, err
	}

	id, err := result.LastInsertId()
	return int(id), err
}

// listAndStoreClusterMembers récupère et stocke les informations des membres du cluster
func (m *TalosVersionManager) listAndStoreClusterMembers() ([]ClusterMember, error) {
	// Récupérer l'ID du cluster
	clusterID, err := m.getClusterID()
	if err != nil {
		return nil, fmt.Errorf("impossible de récupérer l'ID du cluster : %v", err)
	}

	// Récupérer les membres du cluster
	output, err := m.runCommand("talosctl", "get", "members", "-o", "yaml")
	if err != nil {
		return nil, err
	}

	// Structures pour parser les données YAML
	type MemberData struct {
		Metadata struct {
			Namespace     string `yaml:"namespace"`
			Type          string `yaml:"type"`
			ID            string `yaml:"id"`
			ConfigVersion string `yaml:"version"`
		} `yaml:"metadata"`
		Spec struct {
			Hostname    string   `yaml:"hostname"`
			MachineType string   `yaml:"machineType"`
			Addresses   []string `yaml:"addresses"`
			OsVersion   string   `yaml:"operatingSystem"`
		} `yaml:"spec"`
		Node string
	}

	type MemberList struct {
		Items []MemberData `yaml:"items"`
	}

	var memberList MemberList
	err = yaml.Unmarshal([]byte(output), &memberList)
	if err != nil {
		return nil, fmt.Errorf("failed to parse YAML: %v", err)
	}
	// sortie yaml brute
	log.Printf("Sortie Brute:")
	println(output)

	var members []ClusterMember

	// Stocker le premier client comme client global
	if len(memberList.Items) > 0 {
		m.clientInfo = memberList.Items[0].Node
	}
	log.Printf("Member List:")
	fmt.Printf("%+v\n", memberList)

	// Transformer les données membres
	for _, memberData := range memberList.Items {
		member := ClusterMember{
			Namespace:               memberData.Metadata.Namespace,
			Status:                  memberData.Metadata.Type,
			MachineID:               memberData.Metadata.ID,
			Hostname:                memberData.Spec.Hostname,
			Role:                    memberData.Spec.MachineType,
			currentInstalledVersion: memberData.Metadata.ConfigVersion,
			latestRemoteVersion:     memberData.Spec.OsVersion,
			IP:                      strings.Join(memberData.Spec.Addresses, ", "),
		}
		members = append(members, member)
	}
	log.Printf("Liste:")
	for _, memberData := range memberList.Items {
		println(memberData.Node)
	}

	// Insérer ou mettre à jour le cluster
	dbClusterID, err := m.upsertCluster(clusterID, "https://cluster.local")
	if err != nil {
		return nil, err
	}

	// Stocker les membres du cluster
	err = m.upsertClusterMembers(dbClusterID, members)
	if err != nil {
		return nil, err
	}

	return members, nil
}

// upsertClusterMembers insère ou met à jour les informations des membres du cluster
func (m *TalosVersionManager) upsertClusterMembers(clusterID int, members []ClusterMember) error {
	tx, err := m.db.Begin()
	if err != nil {
		return err
	}

	stmt, err := tx.Prepare(`
		INSERT OR REPLACE INTO cluster_members 
		(cluster_id, namespace, type, member_id, hostname, machine_type, config_version, os_version, addresses, last_updated)
		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
	`)
	if err != nil {
		return err
	}
	defer stmt.Close()

	now := time.Now()
	for _, member := range members {
		_, err = stmt.Exec(
			clusterID,
			member.Namespace,
			member.Status,
			member.MachineID,
			member.Hostname,
			member.Role,
			member.currentInstalledVersion,
			member.latestRemoteVersion,
			member.IP,
			now,
		)
		if err != nil {
			tx.Rollback()
			return err
		}
	}

	return tx.Commit()
}

// getClusterMembers récupère les membres d'un cluster spécifique depuis la base de données
func (m *TalosVersionManager) getClusterMembers(clusterID int) ([]ClusterMember, error) {
	rows, err := m.db.Query(`
		SELECT 
			id, 
			namespace, 
			type, 
			member_id, 
			hostname, 
			machine_type, 
			config_version, 
			os_version, 
			addresses, 
			last_updated 
		FROM cluster_members 
		WHERE cluster_id = ?
	`, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var members []ClusterMember
	for rows.Next() {
		var member ClusterMember
		err := rows.Scan(
			&member.ID,
			&member.Namespace,
			&member.Status,
			&member.MachineID,
			&member.Hostname,
			&member.Role,
			&member.currentInstalledVersion,
			&member.latestRemoteVersion,
			&member.IP,
			&member.LastUpdated,
		)
		member.ClusterID = clusterID

		if err != nil {
			return nil, err
		}
		members = append(members, member)
	}

	return members, nil
}

// fetchLatestRelease récupère la dernière version de Talos depuis GitHub
func (m *TalosVersionManager) fetchLatestRelease() error {
	ctx := context.Background()
	release, _, err := m.githubClient.Repositories.GetLatestRelease(ctx, "siderolabs", "talos")
	if err != nil {
		return err
	}
	m.latestRemoteVersion = release.GetTagName()
	return nil
}

// getCurrentInstalledVersion récupère la version actuellement installée
func (m *TalosVersionManager) getCurrentInstalledVersion() error {
	output, err := m.runCommand("talosctl", "version")
	if err != nil {
		return err
	}
	m.currentInstalledVersion = strings.TrimSpace(output)
	return nil
}

// upgradeSystem effectue la mise à jour du système Talos
func (m *TalosVersionManager) upgradeSystem() error {
	_, err := m.runCommand(
		"talosctl",
		"upgrade",
		"-n", "nodeIP",
		"--image", m.latestRemoteVersion,
		"--preserve=true",
	)
	return err
}

// upgradeKubernetes effectue la mise à jour de Kubernetes
func (m *TalosVersionManager) upgradeKubernetes() error {
	_, err := m.runCommand(
		"talosctl",
		"upgrade-k8s",
		"-n", "nodeIP",
		"--to", m.latestRemoteVersion,
	)
	return err
}

// scheduleClusterSync gère la synchronisation périodique du cluster
func (m *TalosVersionManager) scheduleClusterSync() {
	ticker := time.NewTicker(15 * time.Minute)
	go func() {
		for {
			select {
			case <-ticker.C:
				if err := m.fetchLatestRelease(); err != nil {
					log.Printf("Échec de la récupération de la dernière version : %v", err)
				}

				if err := m.getCurrentInstalledVersion(); err != nil {
					log.Printf("Échec de la récupération de la version installée : %v", err)
				}

				_, err := m.listAndStoreClusterMembers()
				if err != nil {
					log.Printf("Échec de la synchronisation des membres du cluster : %v", err)
				}

				if m.latestRemoteVersion != m.currentInstalledVersion {
					if err := m.upgradeSystem(); err != nil {
						log.Printf("Échec de la mise à jour du système : %v", err)
					}

					if err := m.upgradeKubernetes(); err != nil {
						log.Printf("Échec de la mise à jour de Kubernetes : %v", err)
					}
				}
			}
		}
	}()
}

// startWebServer démarre un serveur web pour visualiser les informations du cluster
func (m *TalosVersionManager) startWebServer() {
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// Récupérer dynamiquement l'ID du cluster
		clusterID, err := m.getClusterID()
		if err != nil {
			http.Error(w, "Impossible de récupérer l'ID du cluster", http.StatusInternalServerError)
			return
		}

		// Convertir l'ID en entier pour la base de données
		dbClusterID, err := m.upsertCluster(clusterID, "https://cluster.local")
		if err != nil {
			http.Error(w, "Erreur lors de l'insertion du cluster", http.StatusInternalServerError)
			return
		}

		members, err := m.getClusterMembers(dbClusterID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		membersHTML := ""
		for _, member := range members {
			membersHTML += fmt.Sprintf(`
				<tr>
					<td>%s</td>
					<td>%s</td>
					<td>%s</td>
					<td>%s</td>
					<td>%s</td>
					<td>%s</td>
					<td>%s</td>
					<td>%s</td>
				</tr>
			`,
				member.Namespace,
				member.Status,
				member.MachineID,
				member.Hostname,
				member.Role,
				member.currentInstalledVersion,
				member.latestRemoteVersion,
				member.IP,
			)
		}

		html := fmt.Sprintf(`
			<html>
				<head>
					<title>Talos Cluster Manager</title>
					<style>
						body { 
							font-family: Arial, sans-serif; 
							max-width: 1200px; 
							margin: 0 auto; 
							padding: 20px;
						}
						.client-info { 
							background-color: #f0f0f0; 
							padding: 10px; 
							margin-bottom: 20px; 
							border-radius: 5px; 
							font-weight: bold;
						}
						table { 
							border-collapse: collapse; 
							width: 100%%; 
						}
						th, td { 
							border: 1px solid #ddd; 
							padding: 8px; 
							text-align: left; 
						}
						th { 
							background-color: #f2f2f2; 
							font-weight: bold;
						}
					</style>
				</head>
				<body>
					<div class="client-info">
						Machine ayant traité votre requête : %s
					</div>
					<h1>Talos Cluster Manager</h1>
					<p>ID du Cluster : %s</p>
					<p>Dernière version disponible : %s</p>
					<p>Version installée : %s</p>
					<h2>Membres du Cluster</h2>
					<table>
						<tr>
							<th>Namespace</th>
							<th>Type</th>
							<th>ID</th>
							<th>Hostname</th>
							<th>Machine Type</th>
							<th>Config Version</th>
							<th>OS Version</th>
							<th>Adresses</th>
						</tr>
						%s
					</table>
				</body>
			</html>
		`, m.clientInfo, clusterID, m.latestRemoteVersion, m.currentInstalledVersion, membersHTML)

		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		w.Write([]byte(html))
	})

	m.webServer = &http.Server{
		Addr:         ":8080",
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	go func() {
		log.Printf("Démarrage du serveur web sur http://localhost:8080")
		if err := m.webServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Erreur du serveur HTTP : %v", err)
		}
	}()
}

// NewTalosVersionManager crée une nouvelle instance du gestionnaire de versions
func NewTalosVersionManager(githubToken string) (*TalosVersionManager, error) {
	ctx := context.Background()
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: githubToken},
	)
	tc := oauth2.NewClient(ctx, ts)

	manager := &TalosVersionManager{
		githubClient: github.NewClient(tc),
	}

	if err := manager.initDatabase(); err != nil {
		return nil, err
	}

	return manager, nil
}

// Fonction principale qui initialise et démarre le gestionnaire de cluster
func main() {
	// Récupérer le token GitHub depuis l'environnement
	githubToken := os.Getenv("GITHUB_TOKEN")
	if githubToken == "" {
		log.Fatal("Un token GitHub est requis. Définissez GITHUB_TOKEN.")
	}

	// Créer une nouvelle instance du gestionnaire
	manager, err := NewTalosVersionManager(githubToken)
	if err != nil {
		log.Fatalf("Échec de l'initialisation du gestionnaire : %v", err)
	}

	// Récupérer l'ID du cluster
	clusterID, err := manager.getClusterID()
	if err != nil {
		log.Fatalf("Impossible de récupérer l'ID du cluster : %v", err)
	}
	log.Printf("ID du cluster : %s", clusterID)

	// Synchroniser les membres du cluster
	_, err = manager.listAndStoreClusterMembers()
	if err != nil {
		log.Fatalf("Échec de la synchronisation initiale des membres du cluster : %v", err)
	}

	// Récupérer la dernière version disponible
	if err := manager.fetchLatestRelease(); err != nil {
		log.Fatalf("Échec de la récupération de la dernière version : %v", err)
	}

	// Récupérer la version actuellement installée
	if err := manager.getCurrentInstalledVersion(); err != nil {
		log.Fatalf("Échec de la récupération de la version installée : %v", err)
	}

	// Démarrer le serveur web
	manager.startWebServer()

	// Planifier la synchronisation périodique
	manager.scheduleClusterSync()

	// Attendre un signal d'interruption
	sig := make(chan os.Signal, 1)
	signal.Notify(sig, syscall.SIGINT, syscall.SIGTERM)
	<-sig

	// Arrêter proprement le serveur web
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := manager.webServer.Shutdown(ctx); err != nil {
		log.Printf("Erreur lors de l'arrêt du serveur web : %v", err)
	}
}
